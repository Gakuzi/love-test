// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

class TestRunner {
    constructor() {
        this.results = [];
        this.passed = 0;
        this.failed = 0;
    }

    log(message, isError = false) {
        const timestamp = new Date().toLocaleTimeString();
        const logMessage = `[${timestamp}] ${message}`;
        
        if (isError) {
            console.error(logMessage);
            this.results.push({ time: timestamp, message, status: 'FAILED' });
            this.failed++;
        } else {
            console.log(logMessage);
            this.results.push({ time: timestamp, message, status: 'PASSED' });
            this.passed++;
        }
    }

    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async testElement(selector, testName) {
        try {
            const element = document.querySelector(selector);
            if (!element) {
                this.log(`‚ùå ${testName}: –≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω`, true);
                return false;
            }
            this.log(`‚úÖ ${testName}: –≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–∞–π–¥–µ–Ω`);
            return element;
        } catch (error) {
            this.log(`‚ùå ${testName}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ ${selector} - ${error.message}`, true);
            return false;
        }
    }

    async testFunction(functionName, testName) {
        try {
            if (typeof window[functionName] !== 'function') {
                this.log(`‚ùå ${testName}: –§—É–Ω–∫—Ü–∏—è ${functionName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, true);
                return false;
            }
            this.log(`‚úÖ ${testName}: –§—É–Ω–∫—Ü–∏—è ${functionName} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            return true;
        } catch (error) {
            this.log(`‚ùå ${testName}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ${functionName} - ${error.message}`, true);
            return false;
        }
    }

    async testStartupScreen() {
        this.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞—Å—Ç–∞–≤–∫–∏...");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞—Å—Ç–∞–≤–∫–∏
        await this.testElement('#loadingScreen', '–ó–∞—Å—Ç–∞–≤–∫–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');
        await this.testElement('.start-button-section', '–ó–∞—Å—Ç–∞–≤–∫–∞ - —Å–µ–∫—Ü–∏—è –∫–Ω–æ–ø–∫–∏');
        await this.testElement('.start-test-btn', '–ó–∞—Å—Ç–∞–≤–∫–∞ - –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç');
        await this.testElement('.progress-circle', '–ó–∞—Å—Ç–∞–≤–∫–∞ - –ø—Ä–æ–≥—Ä–µ—Å—Å –∫—Ä—É–≥');
        await this.testElement('.progress-percent', '–ó–∞—Å—Ç–∞–≤–∫–∞ - –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏');
        await this.testElement('.progress-label', '–ó–∞—Å—Ç–∞–≤–∫–∞ - –ª–µ–π–±–ª —Å—Ç–∞—Ç—É—Å–∞');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∑–∞—Å—Ç–∞–≤–∫–∏
        await this.testFunction('hideLoadingAndStart', '–ó–∞—Å—Ç–∞–≤–∫–∞ - —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞');
        await this.testFunction('startLoadingSequence', '–ó–∞—Å—Ç–∞–≤–∫–∞ - —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏');
    }

    async testNavigation() {
        this.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await this.testFunction('nextQuestion', '–ù–∞–≤–∏–≥–∞—Ü–∏—è - —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å');
        await this.testFunction('prevQuestion', '–ù–∞–≤–∏–≥–∞—Ü–∏—è - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å');
        await this.testFunction('startTest', '–ù–∞–≤–∏–≥–∞—Ü–∏—è - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞');
        await this.testFunction('showResults', '–ù–∞–≤–∏–≥–∞—Ü–∏—è - –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await this.testElement('#questionCard', '–ù–∞–≤–∏–≥–∞—Ü–∏—è - –∫–∞—Ä—Ç–æ—á–∫–∞ –≤–æ–ø—Ä–æ—Å–∞');
        await this.testElement('.btn-next', '–ù–∞–≤–∏–≥–∞—Ü–∏—è - –∫–Ω–æ–ø–∫–∞ –î–∞–ª–µ–µ');
        await this.testElement('.btn-prev', '–ù–∞–≤–∏–≥–∞—Ü–∏—è - –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥');
        await this.testElement('.progress-container', '–ù–∞–≤–∏–≥–∞—Ü–∏—è - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
    }

    async testQuestionSystem() {
        this.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤...");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
        await this.testElement('#questionText', '–í–æ–ø—Ä–æ—Å—ã - —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞');
        await this.testElement('#answerOptions', '–í–æ–ø—Ä–æ—Å—ã - –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤
        await this.testFunction('selectAnswer', '–í–æ–ø—Ä–æ—Å—ã - –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞');
        await this.testFunction('showQuestion', '–í–æ–ø—Ä–æ—Å—ã - –ø–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞');
        await this.testFunction('updateProgress', '–í–æ–ø—Ä–æ—Å—ã - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
    }

    async testResults() {
        this.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await this.testElement('#finalResults', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã - —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
        await this.testElement('.result-summary', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã - —Å–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await this.testFunction('calculateResults', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã - —Ä–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        await this.testFunction('showCompactBlockResult', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –±–ª–æ–∫–∏');
    }

    async testGlobalState() {
        this.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        try {
            if (typeof currentState !== 'undefined') {
                this.log("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: currentState —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            } else {
                this.log("‚ùå –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: currentState –Ω–µ –Ω–∞–π–¥–µ–Ω", true);
            }
        } catch (error) {
            this.log(`‚ùå –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - ${error.message}`, true);
        }

        try {
            if (typeof questions !== 'undefined' && Array.isArray(questions)) {
                this.log(`‚úÖ –î–∞–Ω–Ω—ã–µ: questions –º–∞—Å—Å–∏–≤ –∏–∑ ${questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤`);
            } else {
                this.log("‚ùå –î–∞–Ω–Ω—ã–µ: questions –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤", true);
            }
        } catch (error) {
            this.log(`‚ùå –î–∞–Ω–Ω—ã–µ: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ questions - ${error.message}`, true);
        }
    }

    async simulateUserFlow() {
        this.log("üîç –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è...");
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const loadingScreen = document.getElementById('loadingScreen');
            if (loadingScreen && loadingScreen.style.display !== 'none') {
                this.log("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è: –ó–∞—Å—Ç–∞–≤–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ");
            } else {
                this.log("‚ùå –°–∏–º—É–ª—è—Ü–∏—è: –ó–∞—Å—Ç–∞–≤–∫–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ", true);
            }

            // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
            const startBtn = document.querySelector('.start-test-btn');
            if (startBtn) {
                this.log("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è: –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∫–ª–∏–∫–∞");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º onclick –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                if (startBtn.onclick) {
                    this.log("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è: –£ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –µ—Å—Ç—å onclick –æ–±—Ä–∞–±–æ—Ç—á–∏–∫");
                } else {
                    this.log("‚ùå –°–∏–º—É–ª—è—Ü–∏—è: –£ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –Ω–µ—Ç onclick –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞", true);
                }
            } else {
                this.log("‚ùå –°–∏–º—É–ª—è—Ü–∏—è: –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true);
            }

        } catch (error) {
            this.log(`‚ùå –°–∏–º—É–ª—è—Ü–∏—è: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ - ${error.message}`, true);
        }
    }

    async runAllTests() {
        this.log("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
        
        await this.testStartupScreen();
        await this.sleep(500);
        
        await this.testNavigation();
        await this.sleep(500);
        
        await this.testQuestionSystem();
        await this.sleep(500);
        
        await this.testResults();
        await this.sleep(500);
        
        await this.testGlobalState();
        await this.sleep(500);
        
        await this.simulateUserFlow();
        
        this.generateReport();
    }

    generateReport() {
        this.log("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏...");
        
        const total = this.passed + this.failed;
        const successRate = ((this.passed / total) * 100).toFixed(1);
        
        console.log("\n" + "=".repeat(60));
        console.log("üìã –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø");
        console.log("=".repeat(60));
        console.log(`üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.passed}`);
        console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.failed}`);
        console.log(`   üìä –í—Å–µ–≥–æ: ${total}`);
        console.log(`   üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
        console.log("=".repeat(60));
        
        if (this.failed > 0) {
            console.log("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:");
            this.results.filter(r => r.status === 'FAILED').forEach((result, index) => {
                console.log(`   ${index + 1}. ${result.message}`);
            });
            console.log("=".repeat(60));
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        console.log("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:");
        if (this.failed > 0) {
            console.log("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ JavaScript –æ—à–∏–±–∫–∏");
            console.log("   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã HTML –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç");
            console.log("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –≤ CSS");
            console.log("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ window scope");
        } else {
            console.log("   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!");
        }
        console.log("=".repeat(60));
        
        return {
            passed: this.passed,
            failed: this.failed,
            total: total,
            successRate: successRate,
            results: this.results
        };
    }
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
window.runAutomaticTest = async function() {
    const tester = new TestRunner();
    return await tester.runAllTests();
};

console.log("üîß –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω!");
console.log("üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: runAutomaticTest()");